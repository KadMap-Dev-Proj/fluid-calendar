---
description: send this with every request so the AI knows what to do.
globs: 
alwaysApply: true
---
send this with every request so the AI knows what to do.

- this app will be a clone of the Motion app for calendar and task management
- user can add a google,outlook or caldav calendars, by clicking add calendar, get the  auth screen, authorizes the app full access to the calendar
- we will be using postgres
- this app is built with nextjs, tailwind, prisma, postgres, shadcn
- it uses fullcalendar package
- when adding an external calendar like google or outlook, we still need to sync the data in our database so we are always working with our local data
- the google/outlook/caldav auth needs to handle refreshing tokens so when the token expires an hour later, we can get a new one and continue syncing.
- use shadcn whenever possible, the correct command to use is `npx shadcn@latest add`
- make minimal changes and don't change or break existing logic and only apply the changes requested.

## SAAS vs Open Source

This project is available in two versions:
1. **Open Source Version**: Free, self-hosted version with core functionality
2. **SAAS Version**: Hosted service with premium features

### Code Organization:
- All SAAS-specific code is in the `src/saas/` directory, which is excluded from the open source repository via `.gitignore`
- The open source repository is at https://github.com/fluidcalendar/fluidcalendar
- The private SAAS repository contains both the open source code and the SAAS-specific code

### Feature Flags:
- Use the `isSaasEnabled` and `isFeatureEnabled()` functions from `src/lib/config.ts` to conditionally enable SAAS features
- SAAS features are controlled by the `NEXT_PUBLIC_ENABLE_SAAS_FEATURES` environment variable

### Component Loading:
- Use the `loadSaasComponent()` function from `src/lib/saas-loader.tsx` to dynamically load SAAS components
- Always provide fallback components that show "upgrade to SAAS" messaging

### Repository Syncing:
- Use the `scripts/sync-repos.sh` script to sync changes from the private SAAS repository to the public open source repository
- The script preserves the `.gitignore` file in the public repository to prevent SAAS code from being published

When implementing new features, consider whether they should be:
1. Core features available in both versions
2. Premium features exclusive to the SAAS version
3. Core features with premium enhancements in the SAAS version 


if you are not sure if this is a saas or opensource feature, then ask to confirm