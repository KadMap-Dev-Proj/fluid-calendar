generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ConnectedAccount {
  id             String         @id @default(cuid())
  provider       String
  email          String
  accessToken    String
  refreshToken   String?
  expiresAt      DateTime
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  caldavUrl      String?
  caldavUsername String?
  userId         String?
  calendars      CalendarFeed[]
  user           User?          @relation(fields: [userId], references: [id])

  @@unique([userId, provider, email])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  role                 String                @default("user")
  accounts             Account[]
  autoScheduleSettings AutoScheduleSettings?
  calendars            CalendarFeed[]
  calendarSettings     CalendarSettings?
  connectedAccounts    ConnectedAccount[]
  dataSettings         DataSettings?
  integrationSettings  IntegrationSettings?
  JobRecord            JobRecord[]
  notificationSettings NotificationSettings?
  projects             Project[]
  sessions             Session[]
  tags                 Tag[]
  tasks                Task[]
  userSettings         UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CalendarFeed {
  id                String            @id @default(uuid())
  name              String
  url               String?
  type              String
  color             String?
  enabled           Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  lastSync          DateTime?
  syncToken         String?
  error             String?
  channelId         String?
  resourceId        String?
  channelExpiration DateTime?
  userId            String?
  accountId         String?
  caldavPath        String?
  ctag              String?
  events            CalendarEvent[]
  account           ConnectedAccount? @relation(fields: [accountId], references: [id])
  user              User?             @relation(fields: [userId], references: [id])

  @@index([accountId])
}

model CalendarEvent {
  id               String          @id @default(uuid())
  feedId           String
  externalEventId  String?
  title            String
  description      String?
  start            DateTime
  end              DateTime
  location         String?
  isRecurring      Boolean         @default(false)
  recurrenceRule   String?
  allDay           Boolean         @default(false)
  status           String?
  sequence         Int?
  created          DateTime?
  lastModified     DateTime?
  organizer        Json?
  attendees        Json?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  isMaster         Boolean         @default(false)
  masterEventId    String?
  recurringEventId String?
  feed             CalendarFeed    @relation(fields: [feedId], references: [id], onDelete: Cascade)
  masterEvent      CalendarEvent?  @relation("EventInstances", fields: [masterEventId], references: [id], onDelete: Cascade)
  instances        CalendarEvent[] @relation("EventInstances")

  @@index([feedId])
  @@index([start, end])
  @@index([externalEventId])
  @@index([masterEventId])
  @@index([recurringEventId])
}

model Project {
  id              String                   @id @default(cuid())
  name            String
  description     String?
  color           String?
  status          String                   @default("active")
  userId          String?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  outlookMappings OutlookTaskListMapping[]
  user            User?                    @relation(fields: [userId], references: [id])
  tasks           Task[]

  @@index([status])
  @@index([userId])
}

model Task {
  id                String    @id @default(cuid())
  title             String
  description       String?
  status            String
  dueDate           DateTime?
  startDate         DateTime?
  duration          Int?
  priority          String?
  energyLevel       String?
  preferredTime     String?
  isAutoScheduled   Boolean   @default(false)
  scheduleLocked    Boolean   @default(false)
  scheduledStart    DateTime?
  scheduledEnd      DateTime?
  scheduleScore     Float?
  lastScheduled     DateTime?
  postponedUntil    DateTime?
  isRecurring       Boolean   @default(false)
  recurrenceRule    String?
  lastCompletedDate DateTime?
  completedAt       DateTime?
  externalTaskId    String?
  source            String?
  lastSyncedAt      DateTime?
  userId            String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  projectId         String?
  project           Project?  @relation(fields: [projectId], references: [id])
  user              User?     @relation(fields: [userId], references: [id])
  tags              Tag[]     @relation("TagToTask")

  @@index([status])
  @@index([dueDate])
  @@index([startDate])
  @@index([priority])
  @@index([projectId])
  @@index([isRecurring])
  @@index([isAutoScheduled])
  @@index([scheduledStart, scheduledEnd])
  @@index([externalTaskId])
  @@index([source])
  @@index([postponedUntil])
  @@index([userId])
}

model Tag {
  id     String  @id @default(cuid())
  name   String
  color  String?
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
  tasks  Task[]  @relation("TagToTask")

  @@unique([name, userId])
  @@index([name])
  @@index([userId])
}

model AutoScheduleSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  workDays          String   @default("[]")
  workHourStart     Int
  workHourEnd       Int
  selectedCalendars String   @default("[]")
  bufferMinutes     Int      @default(15)
  highEnergyStart   Int?
  highEnergyEnd     Int?
  mediumEnergyStart Int?
  mediumEnergyEnd   Int?
  lowEnergyStart    Int?
  lowEnergyEnd      Int?
  groupByProject    Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserSettings {
  id           String   @id @default(cuid())
  userId       String   @unique
  theme        String   @default("system")
  defaultView  String   @default("week")
  timeZone     String
  weekStartDay String   @default("sunday")
  timeFormat   String   @default("12h")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CalendarSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  defaultCalendarId   String?
  workingHoursEnabled Boolean  @default(true)
  workingHoursStart   String   @default("09:00")
  workingHoursEnd     String   @default("17:00")
  workingHoursDays    String   @default("[1,2,3,4,5]")
  defaultDuration     Int      @default(60)
  defaultColor        String   @default("#3b82f6")
  defaultReminder     Int      @default(30)
  refreshInterval     Int      @default(5)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model NotificationSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  eventInvites          Boolean  @default(true)
  eventUpdates          Boolean  @default(true)
  eventCancellations    Boolean  @default(true)
  eventReminders        Boolean  @default(true)
  defaultReminderTiming String   @default("[30]")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model IntegrationSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  googleCalendarEnabled   Boolean  @default(true)
  googleCalendarAutoSync  Boolean  @default(true)
  googleCalendarInterval  Int      @default(5)
  outlookCalendarEnabled  Boolean  @default(true)
  outlookCalendarAutoSync Boolean  @default(true)
  outlookCalendarInterval Int      @default(5)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DataSettings {
  id             String   @id @default(cuid())
  userId         String   @unique
  autoBackup     Boolean  @default(true)
  backupInterval Int      @default(7)
  retainDataFor  Int      @default(365)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SystemSettings {
  id                  String   @id @default(cuid())
  googleClientId      String?
  googleClientSecret  String?
  outlookClientId     String?
  outlookClientSecret String?
  outlookTenantId     String?
  logLevel            String   @default("none")
  logRetention        Json?
  logDestination      String   @default("db")
  publicSignup        Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model OutlookTaskListMapping {
  id              String   @id @default(cuid())
  externalListId  String
  projectId       String
  lastImported    DateTime
  name            String
  isAutoScheduled Boolean  @default(true)
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([externalListId, projectId])
  @@index([externalListId])
  @@index([projectId])
}

model Log {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  level     String
  message   String
  metadata  Json?
  source    String?
  expiresAt DateTime

  @@index([timestamp, level])
  @@index([expiresAt])
  @@index([source, level])
}

model PendingWaitlist {
  id                   String   @id @default(cuid())
  email                String   @unique
  name                 String?
  referralCode         String?
  verificationToken    String   @unique
  verificationExpiry   DateTime
  interestedInLifetime Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([verificationToken])
  @@index([email])
}

model Waitlist {
  id                   String    @id @default(cuid())
  email                String    @unique
  name                 String?
  status               String    @default("WAITING")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  invitedAt            DateTime?
  registeredAt         DateTime?
  invitationToken      String?
  invitationExpiry     DateTime?
  referralCode         String    @unique
  referredBy           String?
  referralCount        Int       @default(0)
  priorityScore        Float     @default(0)
  lastVisitedAt        DateTime?
  notes                String?
  lastPosition         Int?
  interestedInLifetime Boolean   @default(false)

  @@index([status])
  @@index([referredBy])
  @@index([priorityScore])
  @@index([referralCode])
}

model BetaSettings {
  id                           String  @id @default("default")
  maxActiveUsers               Int     @default(100)
  invitationValidDays          Int     @default(7)
  autoInviteEnabled            Boolean @default(false)
  autoInviteCount              Int     @default(10)
  autoInviteFrequency          String  @default("WEEKLY")
  referralBoostAmount          Float   @default(1.0)
  maxReferralBoost             Float   @default(10.0)
  showQueuePosition            Boolean @default(true)
  showTotalWaitlist            Boolean @default(true)
  invitationEmailTemplate      String  @default("")
  waitlistConfirmationTemplate String  @default("")
  reminderEmailTemplate        String  @default("")
}

model JobRecord {
  id          String    @id @default(cuid())
  queueName   String
  jobId       String
  name        String
  data        Json
  status      JobStatus @default(PENDING)
  result      Json?
  error       String?
  attempts    Int       @default(0)
  maxAttempts Int       @default(3)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startedAt   DateTime?
  finishedAt  DateTime?
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])

  @@unique([queueName, jobId])
  @@index([status])
  @@index([queueName])
  @@index([userId])
  @@index([createdAt])
}

enum JobStatus {
  PENDING
  ACTIVE
  COMPLETED
  FAILED
  DELAYED
  PAUSED
}
